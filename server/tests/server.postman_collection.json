{
	"info": {
		"_postman_id": "9e07ffe8-182f-4379-98f5-09360450a71d",
		"name": "test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37686512",
		"_collection_link": "https://group08.postman.co/workspace/group08-Workspace~58ff352a-546b-49cd-a5e8-b697b0fb499d/collection/37686512-9e07ffe8-182f-4379-98f5-09360450a71d?action=share&source=collection_link&creator=37686512"
	},
	"item": [
		{
			"name": "router.get('/', usersControllers.getAllUsers);",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"\r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.users).to.be.an('array');\r",
							"\r",
							"  responseData.users.forEach(function(user) {\r",
							"    pm.expect(user).to.have.property('_id');\r",
							"    pm.expect(user).to.have.property('username');\r",
							"    pm.expect(user).to.have.property('password');\r",
							"    pm.expect(user).to.have.property('birthDate');\r",
							"    pm.expect(user).to.have.property('isLGBTQIA');\r",
							"    pm.expect(user).to.have.property('gender');\r",
							"    pm.expect(user).to.have.property('isAdmin');\r",
							"    pm.expect(user).to.have.property('__v');\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Users response properties validation\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.users).to.be.an('array');\r",
							"    responseData.users.forEach(function(user) {\r",
							"        pm.expect(user._id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"_id should be a non-empty string\");\r",
							"        pm.expect(user.username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"username should be a non-empty string\");\r",
							"        pm.expect(user.password).to.be.a('string').and.to.have.lengthOf.at.least(1, \"password should be a non-empty string\");\r",
							"        pm.expect(user.birthDate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/).and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"birthDate should be in valid date format\");\r",
							"        pm.expect(user.isLGBTQIA).to.be.a('boolean');\r",
							"        pm.expect(user.gender).to.be.a('string').and.to.have.lengthOf.at.least(1, \"gender should be a non-empty string\");\r",
							"        pm.expect(user.isAdmin).to.be.a('boolean');\r",
							"        pm.expect(user.__v).to.be.a('number').and.to.be.at.least(0, \"__v should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		}
	]
}