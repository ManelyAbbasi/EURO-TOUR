const CitiesModel = require("../models/citiesModel");
const express = require("express");
//const citiesModel = require("../models/citiesModel");
const placesToVisitSchema = require("../models/placesToVisitModel");
const router = express.Router();


async function getAllCities(req, res) {
    try {
        const cities = await CitiesModel.find(); // Fetch users from the database
        if (!cities || cities.length === 0) {   // When there's no cities to be found
            return res.status(404).send({ message: 'No cities found.' });
        }
        res.status(200).send({ cities });
    } catch (error) {
        res.status(500).send({ error: 'An error occurred while fetching cities.' });
    }
}
 
async function createCity(req, res, next) {
    try {
        
        if (typeof req.body.cityName !== 'string' || req.body.cityName.trim() === "") {
            return res.status(400).send({ "message": "Invalid cityName: must be a non-empty string" });
        }
        if (typeof req.body.country !== 'string' || req.body.country.trim() === "") {
            return res.status(400).send({ "message": "Invalid country: must be a non-empty string" });
        }
        if (typeof req.body.statistics !== 'string' || req.body.statistics.trim() === "") {
            return res.status(400).send({ "message": "Invalid statistics: must be a non-empty string" });
        }
        if (typeof req.body.facts !== 'string' || req.body.facts.trim() === "") {
            return res.status(400).send({ "message": "Invalid facts: must be a non-empty string" });
        }
        if (req.body.tags.length === 0) {
            return res.status(400).send({ "message": "Tags cannot be an empty array" });
        }
    
        // Create a new city if it doesn't exist
        const cities = new CitiesModel(req.body);
        await cities.save();
        res.status(201).send(cities); 
    } catch (err) {
        next(err); // Pass the error to the next middleware
    }
}


 
async function getOneCity(req, res) { 
    const cityId = req.params.id;

    // check if the cityId is in the valid format (generated by mongoose)
    if (!cityId || !cityId.match(/^[0-9a-fA-F]{24}$/)) {
        return res.status(400).send({ message: 'Invalid city ID format.' });
    }

    try {

        const city = await CitiesModel.findById(cityId);

        if (!city) {
            return res.status(404).send({ message: "City not found" });
        }

        res.status(200).send(city); 
    } catch (err) {

        res.status(500).send({ error: 'An error occurred while fetching the city.' }); 
    }
}

async function updateCity(req, res, next) {
    const cityId = req.params.id;
    try {
        const city = await CitiesModel.findById(cityId);
        if (!city) {
            return res.status(404).send({ "message": "City not found" });
        }

        if (req.body.cityName !== undefined) {
            if (typeof req.body.cityName !== 'string' || req.body.cityName.trim() === "") {
                return res.status(400).send({ "message": "Invalid cityName: must be a non-empty string" });
            }
            city.cityName = req.body.cityName;
        }
        if (req.body.country !== undefined) {
            if (typeof req.body.country !== 'string' || req.body.country.trim() === "") {
                return res.status(400).send({ "message": "Invalid country: must be a non-empty string" });
            }
            city.country = req.body.country;
        }
        if (req.body.statistics !== undefined) {
            if (typeof req.body.statistics !== 'string' || req.body.statistics.trim() === "") {
                return res.status(400).send({ "message": "Invalid statistics: must be a non-empty string" });
            }
            city.statistics = req.body.statistics;
        }
        if (req.body.facts !== undefined) {
            if (typeof req.body.facts !== 'string' || req.body.facts.trim() === "") {
                return res.status(400).send({ "message": "Invalid facts: must be a non-empty string" });
            }
            city.facts = req.body.facts;
        }
        if (Array.isArray(req.body.tags)) {
            if (req.body.tags.length === 0) {
                return res.status(400).send({ "message": "Tags cannot be an empty array" });
            }
            city.tags = req.body.tags;
        }

        await city.save();
        res.status(200).send(city);
    } catch (err) {
        next(err);
    }
}

async function patchCity(req, res, next){
    try{
        const city = await CitiesModel.findById(req.params.cityId);
        if (city == null){
            return res.status(404).send({"message": "City not found"});
        }
        city.statistics = req.body.statistics || city.statistics;
        city.facts = req.body.facts || city.facts;
        city.tags = req.body.tags || city.tags;
        await city.save();
        res.status(201).send(city);
    } catch (err) {
        next(err);
    }
};
 

async function deleteOneCity(req, res) {
    const cityId = req.params.id;
    try {
        const city = await CitiesModel.findByIdAndDelete(cityId);
        if (!city) {
            return res.status(404).send({ "message": "City not found" });
        }
        res.status(200).send({ "message": "City deleted successfully", city });
    } catch (err) {
        console.error(err);
        res.status(500).send({ "message": "Internal server error" });
    }
}


async function createPlaceInCity(req, res) {
    const cityId = req.params.id;
    try {
        // Find the city by their postcode from the request body
        const city = await CitiesModel.findById(cityId);
        console.log(city); // Add this line   
    
        if (!city) {
            return res.status(404).send({ error: "City not found" });
        }

        if (typeof req.body.placeName !== 'string' || req.body.placeName.trim() === '') {
            return res.status(400).send({ "message": "Invalid placeName: must be a non-empty string" });
        }
        if (typeof req.body.address !== 'string' || req.body.address.trim() === '') {
            return res.status(400).send({ "message": "Invalid address: must be a non-empty string" });
        }
        if (req.body.rating < 0.0 || req.body.rating > 5.0) {
            return res.status(400).send({ message: "Invalid rating: must be between 0.0 and 5.0" });
        }
        if (typeof req.body.content !== 'string' || req.body.content.trim() === '') {
            return res.status(400).send({ "message": "Invalid content: must be a non-empty string" });
        }
        if (req.body.tags.length === 0) {
            return res.status(400).send({ "message": "Tags cannot be an empty array" });
        }

        // Create the city
        const placesToVisit = new placesToVisitSchema({
            placeName: req.body.placeName,
            address: req.body.address,
            rating: req.body.rating,
            content: req.body.content,
            tags: req.body.tags,
            reviews: req.body.reviews,
            city: city._id, // Set user field to the found user's _id
        });
        console.log(placesToVisit); // Add this line

        await placesToVisit.save();
        res.status(201).send(placesToVisit);
    } catch (err) {
        console.error("Error creating the place to visit:", err);
        res.status(500).send({ message: "An error occurred while creating the place", error: err.message });
    }
};

module.exports = {
    getAllCities,
    createCity,
    getOneCity,
    updateCity,
    patchCity,
    deleteOneCity,
    createPlaceInCity
}